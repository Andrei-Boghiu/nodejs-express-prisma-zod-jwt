generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           String   @id @default(uuid())
    email        String   @unique
    password     String
    firstName    String?
    middleName   String?
    lastName     String?
    organization String?
    role         UserRole @default(USER)
    isActive     Boolean  @default(true)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    logs Log[]

    createdProjects Project[] @relation("ProjectCreatedBy")
    updatedProjects Project[] @relation("ProjectUpdatedBy")
    deletedProjects Project[] @relation("ProjectDeletedBy")

    collaborations     Membership[]
    createdMemberships Membership[] @relation("MembershipCreatedBy")
    updatedMemberships Membership[] @relation("MembershipUpdatedBy")
    deletedMemberships Membership[] @relation("MembershipDeletedBy")

    milestones        Milestone[]
    createdMilestones Milestone[] @relation("MilestoneCreatedBy")
    updatedMilestones Milestone[] @relation("MilestoneUpdatedBy")
    deletedMilestones Milestone[] @relation("MilestoneDeletedBy")

    tasks        Task[]
    createdTasks Task[] @relation("TaskCreatedBy")
    updatedTasks Task[] @relation("TaskUpdatedBy")
    deletedTasks Task[] @relation("TaskDeletedBy")

    comments        Comment[]
    createdComments Comment[] @relation("CommentCreatedBy")
    updatedComments Comment[] @relation("CommentUpdatedBy")
    deletedComments Comment[] @relation("CommentDeletedBy")
}

model Log {
    id        String  @id @default(uuid())
    userId    String
    action    String // e.g. "CREATE_TASK", "UPDATE_PROJECT", "DELETE_COMMENT"
    entity    String // Entity type (e.g. "Task", "Project", "Comment")
    entityId  String // ID of the affected entity
    message   String? @db.Text // Optional descriptive message
    userAgent String? // Browser/device info
    metadata  Json? // Flexible field to store extra contextual data
    tag       String? // Optional: custom label (e.g., "security", "system")

    createdAt DateTime @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
    id          String        @id @default(uuid())
    name        String
    description String?       @db.Text
    priority    Priority      @default(MEDIUM)
    status      ProjectStatus @default(PLANNING)
    visibility  Visibility    @default(PRIVATE)
    startDate   DateTime?
    endDate     DateTime?

    milestones  Milestone[]
    Memberships Membership[]

    createdAt     DateTime @default(now())
    createdBy     String
    createdByUser User     @relation("ProjectCreatedBy", fields: [createdBy], references: [id], onDelete: Cascade)

    updatedAt     DateTime @updatedAt
    updatedBy     String
    updatedByUser User     @relation("ProjectUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)

    deletedAt     DateTime?
    deletedBy     String?
    deletedByUser User?     @relation("ProjectDeletedBy", fields: [deletedBy], references: [id], onDelete: Cascade)
}

model Milestone {
    id           String    @id @default(uuid())
    name         String
    description  String?   @db.Text
    supervisorId String?
    status       Status    @default(PLANNING)
    startDate    DateTime?
    endDate      DateTime?
    projectId    String

    supervisor User?   @relation(fields: [supervisorId], references: [id], onDelete: Cascade)
    tasks      Task[]
    project    Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    createdAt     DateTime @default(now())
    createdBy     String
    createdByUser User     @relation("MilestoneCreatedBy", fields: [createdBy], references: [id], onDelete: Cascade)

    updatedAt     DateTime @updatedAt
    updatedBy     String
    updatedByUser User     @relation("MilestoneUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)

    deletedAt     DateTime?
    deletedBy     String?
    deletedByUser User?     @relation("MilestoneDeletedBy", fields: [deletedBy], references: [id], onDelete: Cascade)
}

model Task {
    id          String    @id @default(uuid())
    title       String
    description String?   @db.Text
    priority    Priority  @default(MEDIUM)
    status      Status    @default(PLANNING)
    dueDate     DateTime?

    assigneeId  String?
    milestoneId String

    comments  Comment[]
    assignee  User?     @relation(fields: [assigneeId], references: [id], onDelete: Cascade)
    milestone Milestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)

    createdAt     DateTime @default(now())
    createdBy     String
    createdByUser User     @relation("TaskCreatedBy", fields: [createdBy], references: [id], onDelete: Cascade)

    updatedAt     DateTime @updatedAt
    updatedBy     String
    updatedByUser User     @relation("TaskUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)

    deletedAt     DateTime?
    deletedBy     String?
    deletedByUser User?     @relation("TaskDeletedBy", fields: [deletedBy], references: [id], onDelete: Cascade)
}

model Comment {
    id      String @id @default(uuid())
    content String @db.Text
    taskId  String
    userId  String

    task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt     DateTime @default(now())
    createdBy     String
    createdByUser User     @relation("CommentCreatedBy", fields: [createdBy], references: [id], onDelete: Cascade)

    updatedAt     DateTime @updatedAt
    updatedBy     String
    updatedByUser User     @relation("CommentUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)

    deletedAt     DateTime?
    deletedBy     String?
    deletedByUser User?     @relation("CommentDeletedBy", fields: [deletedBy], references: [id], onDelete: Cascade)
}

model Membership {
    projectId String
    userId    String

    hasAccepted Boolean        @default(false)
    role        MembershipRole @default(CONTRIBUTOR)

    createdAt     DateTime @default(now())
    createdBy     String
    createdByUser User     @relation("MembershipCreatedBy", fields: [createdBy], references: [id], onDelete: Cascade)

    updatedAt     DateTime @updatedAt
    updatedBy     String
    updatedByUser User     @relation("MembershipUpdatedBy", fields: [updatedBy], references: [id], onDelete: Cascade)

    deletedAt     DateTime?
    deletedBy     String?
    deletedByUser User?     @relation("MembershipDeletedBy", fields: [deletedBy], references: [id], onDelete: Cascade)

    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([projectId, userId])
}

enum Visibility {
    PRIVATE
    PUBLIC
}

enum UserRole {
    USER
    ADMIN
    DEV
}

enum MembershipRole {
    OWNER
    MANAGER
    CONTRIBUTOR
    VIEWER
}

enum Status {
    PLANNING
    IN_PROGRESS
    COMPLETED
    ON_HOLD
    CANCELLED
}

enum ProjectStatus {
    PLANNING
    IN_PROGRESS
    COMPLETED
    ON_HOLD
    CANCELLED
    ARCHIVED
}

enum Priority {
    LOW
    MEDIUM
    HIGH
    URGENT
}
